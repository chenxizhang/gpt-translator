name: "gpt translator"
description: "use openai or azure openai to translate changed file to one or more languages."
inputs:
  openai_api_key:
    description: "openai api key, both OpenAI service and Azure OpenAI Service use the same parameter, and we highly recommeneded you to store this key in the secrets."
    required: true
  files:
    description: "files to translate. You can use glob patterns to match multiple files. for example, docs/zh/*.md. Please note, this action will only translate those that files are changed in the pull request or push event."
    required: true
  systemPrompt:
    description: "system prompt for OpenAI service. You can set it directly here, or reference to a file (like system_prompt.md) in the repository, or use a URL to get the system prompt(like https://yourwebsite.com/system.md), you can even use a template from prompt library (like lib:gpt-translator-md). This is the magic from the OpenAI PowerShell Module (https://github.com/chenxizhang/openai-powershell). For all the kinds of prompt, you can specific a placeholder of variable in the prompt, like {{to_language}}, then you can replace the value during the runtime."
    required: true
    default: |-
      You help me to translate the content from {{from_language}} to {{to_language}}, in {{style}} style. 
      You mustn't change the content structure and anything else, you just translate the content based on your language skill.
      You also follow the below user specific rules (especially for this doc format or the context) if present.
      {{rules}}
  from_language:
    description: "from language, you can set one language in a time. You can use the language code like zh, en, fr, etc, or zh-cn, en-us, fr-fr, etc. Please make sure the language code is in the path of the file, for eaxmple, docs/zh/*.md, the language code is zh."
    required: true
    default: zh
  to_language:
    description: "to language(s), you can set one or more languages in a time, separate by comma(,).You can use the language code like zh, en, fr, etc, or zh-cn, en-us, fr-fr, etc. The translated files will have the same file name, but placed in the target language folder. For example, if the file is docs/zh/*.md, and the to_language is en, the translated file will be docs/en/*.md."
    required: true
    default: en
  modelOrdeployment:
    description: "The gpt model you want to use, like gpt-4-turbo, gpt-3.5-turbo. if you are using Azure OpenAI,set the deployment name here."
    default: gpt-4-turbo
  useAzure:
    description: "If you are using Azure OpenAI Service, set this parameter to true, or 1."
    default: "false"
  endpoint:
    description: "if you are using Azure OpenAI Service, set this parameter to the endpoint of your deployment."
  commit:
    description: "commit the translated files to the repository"
    default: "true"
  style:
    description: "The style of the translation, like formal, informal, friendly, professional, etc."
    default: professional
  rules:
    description: "The rules of the translation, like don't change the structure, don't change the meaning, etc."
    default: ""
runs:
  using: composite
  steps:
    - id: changed-files
      name: changed-files
      uses: knu/changed-files@v1.0.0
      with:
        paths: ${{inputs.files}}
    - name: translate
      shell: pwsh
      env:
        files: ${{steps.changed-files.outputs.matched_files_json}}
        system: ${{inputs.systemPrompt}}
        openai_api_key: ${{inputs.openai_api_key}}
        from: ${{inputs.from_language}}
        to: ${{inputs.to_language}}
        model: ${{inputs.modelOrdeployment}}
        useAzure: ${{inputs.useAzure}}
        endpoint: ${{inputs.endpoint}}
        style: ${{inputs.style}}
        rules: ${{inputs.rules}}
      run: |
        Set-PSRepository -InstallationPolicy Trusted -Name PSGallery
        Install-Module -Name code365scripts.openai -RequiredVersion 2.0.2.2
        Import-Module code365scripts.openai
        $env:files | ConvertFrom-Json | ForEach-Object { 
          $langs = $env:to -split ","
          foreach($lang in $langs){
            $env:to = $lang
            $file = $_ -replace $env:from, $env:to;
            New-Item -Path $file -ItemType File -Force;
            $context =@{from_language=$($env:from);to_language=$($env:to);style=$($env:style);rules=$($env:rules)}
            try{
              if($env:useAzure.toLower() -eq "true" -or $env:useAzure -eq "1"){
                gpt -system $env:system -prompt $_ -api_key $env:openai_api_key -OutFile $file -context $context -azure -model $env:model -endpoint $env:endpoint -verbose
              }else{
                gpt -system $env:system -prompt $_ -api_key $env:openai_api_key -OutFile $file -context $context -model $env:model -verbose
              }
            }
            catch{
              Write-Error $_
            }
          }
        }
    - name: commit
      if: ${{inputs.commit =='true'}}
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "Auto translate files to ${{inputs.to_language}} by chenxizhang/gpt-translator action"
